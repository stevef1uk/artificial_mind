FROM golang:1.25-alpine AS builder
WORKDIR /app
COPY . .
RUN go mod download
RUN cd hdn && CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -tags neo4j -ldflags="-s -w" -o ../bin/hdn-server .

# Build internal tools (from tools/*) into bin/tools for inclusion in runtime image
RUN set -e; \
    mkdir -p bin/tools; \
    for d in $(find tools -maxdepth 1 -type d -not -path 'tools'); do \
      name=$(basename "$d"); \
      ( cd "$d"; \
        if [ ! -f go.mod ]; then go mod init agi/tools/$name >/dev/null 2>&1 || true; fi; \
        if [ "$name" = "html_scraper" ]; then go get golang.org/x/net/html@latest >/dev/null 2>&1 || true; fi; \
        go mod tidy >/dev/null 2>&1 || true; \
        CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o ../../bin/tools/$name . \
      ); \
    done

# Use prebuilt secure-packager image to provide packager tooling
FROM stevef1uk/secure-packager:latest AS packager

FROM alpine:latest AS secure-build
RUN apk add --no-cache ca-certificates tzdata
WORKDIR /app
# Copy packager tools
COPY --from=packager /app/packager /usr/local/bin/packager
COPY --from=packager /app/unpack /usr/local/bin/unpack
COPY --from=packager /app/issue-token /usr/local/bin/issue-token
RUN chmod +x /usr/local/bin/packager /usr/local/bin/unpack /usr/local/bin/issue-token
# Copy built binary from builder
COPY --from=builder /app/bin/hdn-server /app/hdn-server

# Accept build-time public keys for customer and vendor
ARG CUSTOMER_PUBLIC_KEY=secure/customer_public.pem
ARG VENDOR_PUBLIC_KEY=secure/vendor_public.pem
COPY ${CUSTOMER_PUBLIC_KEY} /keys/customer_public.pem
COPY ${VENDOR_PUBLIC_KEY} /keys/vendor_public.pem

# Produce encrypted payload as zip with license manifest
RUN test -f /keys/customer_public.pem && test -f /keys/vendor_public.pem
RUN install -d /payload /out \
 && mv /app/hdn-server /payload/ \
 && /usr/local/bin/packager \
      -in /payload \
      -out /out \
      -pub /keys/customer_public.pem \
      -zip=true \
      -license \
      -vendor-pub /keys/vendor_public.pem

# Final runtime image
FROM alpine:latest
RUN apk add --no-cache ca-certificates tzdata openssh-client
WORKDIR /app
# runtime unpack tool and encrypted payload
COPY --from=secure-build /usr/local/bin/unpack /usr/local/bin/unpack
COPY --from=secure-build /out/encrypted_files.zip ./hdn-server.enc
# app config
COPY hdn/config.json ./config.json
COPY hdn/domain.json ./domain.json
# include host-exec tools used by HDN tool handlers
RUN mkdir -p /app/bin /app/bin/tools
COPY --from=builder /app/bin/tools/ /app/bin/tools/
RUN chmod -R +x /app/bin/tools || true
# entrypoint
COPY scripts/secure_entrypoint.sh ./entrypoint.sh
RUN chmod +x ./entrypoint.sh /usr/local/bin/unpack
ENTRYPOINT ["/app/entrypoint.sh"]
